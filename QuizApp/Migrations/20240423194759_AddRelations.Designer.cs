// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizApp.Context;

#nullable disable

namespace QuizApp.Migrations;

[DbContext(typeof(QuizAppDbContext))]
[Migration("20240423194759_AddRelations")]
partial class AddRelations
{
    /// <inheritdoc />
    protected override void BuildTargetModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
        modelBuilder
            .HasAnnotation("ProductVersion", "8.0.3")
            .HasAnnotation("Relational:MaxIdentifierLength", 128);

        SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

        modelBuilder.Entity("QuizApp.Models.Answer", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("AnswerText")
                    .HasColumnType("nvarchar(max)");

                b.Property<bool>("IsCorrect")
                    .HasColumnType("bit");

                b.Property<int>("QuestionId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("QuestionId");

                b.ToTable("Answers");
            });

        modelBuilder.Entity("QuizApp.Models.Attempt", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<int>("AnswerId")
                    .HasColumnType("int");

                b.Property<bool>("IsCorrect")
                    .HasColumnType("bit");

                b.Property<int>("RoundId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("AnswerId");

                b.HasIndex("RoundId");

                b.ToTable("Attempts");
            });

        modelBuilder.Entity("QuizApp.Models.Player", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<int>("HighScore")
                    .HasColumnType("int");

                b.Property<string>("Username")
                    .HasColumnType("nvarchar(max)");

                b.Property<int>("WinCount")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.ToTable("Players");
            });

        modelBuilder.Entity("QuizApp.Models.Question", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("QuestionText")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.ToTable("Questions");
            });

        modelBuilder.Entity("QuizApp.Models.Round", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<bool>("IsWon")
                    .HasColumnType("bit");

                b.Property<int>("PlayerId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("PlayerId");

                b.ToTable("Rounds");
            });

        modelBuilder.Entity("QuizApp.Models.Answer", b =>
            {
                b.HasOne("QuizApp.Models.Question", null)
                    .WithMany("Answers")
                    .HasForeignKey("QuestionId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

        modelBuilder.Entity("QuizApp.Models.Attempt", b =>
            {
                b.HasOne("QuizApp.Models.Answer", null)
                    .WithMany("Attempts")
                    .HasForeignKey("AnswerId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("QuizApp.Models.Round", null)
                    .WithMany("Attempts")
                    .HasForeignKey("RoundId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

        modelBuilder.Entity("QuizApp.Models.Round", b =>
            {
                b.HasOne("QuizApp.Models.Player", null)
                    .WithMany("Rounds")
                    .HasForeignKey("PlayerId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

        modelBuilder.Entity("QuizApp.Models.Answer", b =>
            {
                b.Navigation("Attempts");
            });

        modelBuilder.Entity("QuizApp.Models.Player", b =>
            {
                b.Navigation("Rounds");
            });

        modelBuilder.Entity("QuizApp.Models.Question", b =>
            {
                b.Navigation("Answers");
            });

        modelBuilder.Entity("QuizApp.Models.Round", b =>
            {
                b.Navigation("Attempts");
            });
#pragma warning restore 612, 618
    }
}
